service: liquid-backend

plugins:
  - serverless-appsync-plugin

layers:
  dependencies:
    path: layer
    description: Required dependencies for data processing
    compatibleRuntimes:
      - python3.9

provider:
  name: aws
  runtime: python3.9
  profile: ikonicshop
  region: ${opt:region, 'eu-west-1'}
  stage: ${opt:stage, 'dev'}
  environment:
    STAGE: ${self:provider.stage}
    USER_POOL_ID: !Ref CognitoUserPool
    USER_POOL_CLIENT_ID: !Ref CognitoUserPoolClient
  iam:
    role:
      statements:
        # DynamoDB permissions - consolidated for all tables
        - Effect: Allow
          Action:
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - dynamodb:Query
            - dynamodb:Scan
          Resource:
            - !GetAtt UserTable.Arn
            - !GetAtt AccountTable.Arn
            - !GetAtt WorkspaceTable.Arn
            - !GetAtt PathTable.Arn
            - !GetAtt ComponentTable.Arn
            - !GetAtt DataTable.Arn
            - !Sub "${UserTable.Arn}/index/*"
            - !Sub "${AccountTable.Arn}/index/*"
            - !Sub "${WorkspaceTable.Arn}/index/*"
            - !Sub "${PathTable.Arn}/index/*"
            - !Sub "${ComponentTable.Arn}/index/*"
            - !Sub "${DataTable.Arn}/index/*"

        # S3 permissions for data lake
        - Effect: Allow
          Action:
            - s3:PutObject
            - s3:GetObject
            - s3:DeleteObject
          Resource: !Sub "${DataBucket.Arn}/*"

        # Cognito User Pool permissions
        - Effect: Allow
          Action:
            - cognito-idp:AdminCreateUser
            - cognito-idp:AdminSetUserPassword
            - cognito-idp:AdminDeleteUser
            - cognito-idp:AdminInitiateAuth
            - cognito-idp:AdminGetUser
          Resource: !GetAtt CognitoUserPool.Arn

        # AppSync permissions
        - Effect: Allow
          Action:
            - appsync:GraphQL
          Resource:
            - !Join
              - ''
              - - 'arn:aws:appsync:'
                - ${self:provider.region}
                - ':'
                - Ref: AWS::AccountId
                - ':apis/'
                - !GetAtt GraphQlApi.ApiId
                - '/*'

        # CloudWatch Logs permissions
        - Effect: Allow
          Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
          Resource:
            - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${self:service}-${self:provider.stage}-*:*"

custom:
  tablePrefix: ${self:service}-${self:provider.stage}
  tableName:
    user: ${self:custom.tablePrefix}-user
    account: ${self:custom.tablePrefix}-account
    workspace: ${self:custom.tablePrefix}-workspace
    path: ${self:custom.tablePrefix}-path
    component: ${self:custom.tablePrefix}-component
    data: ${self:custom.tablePrefix}-data

  # AppSync configuration
  appSync:
    name: ${self:service}-${self:provider.stage}
    authenticationType: AMAZON_COGNITO_USER_POOLS
    userPoolConfig:
      userPoolId: !Ref CognitoUserPool
      defaultAction: ALLOW
      awsRegion: ${self:provider.region}
    additionalAuthentication:
      - authenticationType: API_KEY
    apiKeys:
      - name: default
        description: Default API Key
        expiresAfter: 30d
    schema:
      - schema/schema.graphql
      - schema/schema_additions.graphql
    mappingTemplatesLocation: schema/resolvers
    defaultAuthentication:
      authenticationType: API_KEY
    substitutions:
      subscriptions: true
    mappingTemplates:

      - type: Query
        field: listWorkspaces
        dataSource: workspaceTable
        request: Query.listWorkspaces.req.vtl
        response: Query.listWorkspaces.res.vtl

      - type: Query
        field: listPaths
        dataSource: pathTable
        request: Query.listPaths.req.vtl
        response: Query.listPaths.res.vtl

      - type: Query
        field: listComponents
        dataSource: componentTable
        request: Query.listComponents.req.vtl
        response: Query.listComponents.res.vtl

      - type: Query
        field: listData
        dataSource: dataTable
        request: Query.listData.req.vtl
        response: Query.listData.res.vtl

      - type: Query
        field: getWorkspace
        dataSource: workspaceTable
        request: Query.getWorkspace.req.vtl
        response: Query.getWorkspace.res.vtl

      - type: Query
        field: getPath
        dataSource: pathTable
        request: Query.getPath.req.vtl
        response: Query.getPath.res.vtl

      - type: Query
        field: getComponent
        dataSource: componentTable
        request: Query.getComponent.req.vtl
        response: Query.getComponent.res.vtl

      - type: Query
        field: getData
        dataSource: dataTable
        request: Query.getData.req.vtl
        response: Query.getData.res.vtl

      - type: Mutation
        field: bulkCreateData
        dataSource: bulkDataSource
        request: Mutation.bulkCreateData.req.vtl
        response: Mutation.bulkCreateData.res.vtl

      - type: Mutation
        field: createWorkspace
        dataSource: workspaceTable
        request: Mutation.createWorkspaces.req.vtl
        response: Mutation.createWorkspaces.res.vtl

      - type: Mutation
        field: deleteWorkspace
        dataSource: workspaceTable
        request: Mutation.deleteWorkspaces.req.vtl
        response: Mutation.deleteWorkspaces.res.vtl

      - type: Mutation
        field: createPath
        dataSource: pathTable
        request: Mutation.createPath.req.vtl
        response: Mutation.createPath.res.vtl

      - type: Mutation
        field: deletePath
        dataSource: pathTable
        request: Mutation.deletePath.req.vtl
        response: Mutation.deletePath.res.vtl

      - type: Mutation
        field: createComponent
        dataSource: componentTable
        request: Mutation.createComponent.req.vtl
        response: Mutation.createComponent.res.vtl

      - type: Mutation
        field: deleteComponent
        dataSource: componentTable
        request: Mutation.deleteComponent.req.vtl
        response: Mutation.deleteComponent.res.vtl

      - type: Mutation
        field: createData
        dataSource: dataTable
        request: Mutation.createData.req.vtl
        response: Mutation.createData.res.vtl

      - type: Mutation
        field: deleteData
        dataSource: dataTable
        request: Mutation.deleteData.req.vtl
        response: Mutation.deleteData.res.vtl

    dataSources:
      - type: AMAZON_DYNAMODB
        name: workspaceTable
        config:
          tableName: ${self:custom.tableName.workspace}
          serviceRoleArn: !GetAtt AppSyncDynamoDBServiceRole.Arn

      - type: AMAZON_DYNAMODB
        name: pathTable
        config:
          tableName: ${self:custom.tableName.path}
          serviceRoleArn: !GetAtt AppSyncDynamoDBServiceRole.Arn

      - type: AMAZON_DYNAMODB
        name: componentTable
        config:
          tableName: ${self:custom.tableName.component}
          serviceRoleArn: !GetAtt AppSyncDynamoDBServiceRole.Arn

      - type: AMAZON_DYNAMODB
        name: dataTable
        config:
          tableName: ${self:custom.tableName.data}
          serviceRoleArn: !GetAtt AppSyncDynamoDBServiceRole.Arn

      - type: AWS_LAMBDA
        name: bulkDataSource
        config:
          lambdaFunctionArn: "arn:aws:lambda:${self:provider.region}:${aws:accountId}:function:${self:service}-${self:provider.stage}-bulkDataHandler"
          serviceRoleArn: !GetAtt AppSyncLambdaServiceRole.Arn

functions:
  dataToS3:
    name: ${self:service}-${self:provider.stage}-dataToS3
    handler: src/functions/data_handlers/data_to_s3.handler
    layers:
      - { Ref: DependenciesLambdaLayer }  # Reference the layer
    events:
      - stream:
          type: dynamodb
          arn: !GetAtt DataTable.StreamArn
    environment:
      DATA_BUCKET: !Ref DataBucket
      WORKSPACE_TABLE: ${self:custom.tableName.workspace}
      PATH_TABLE: ${self:custom.tableName.path}
      COMPONENT_TABLE: ${self:custom.tableName.component}
      DATA_TABLE: ${self:custom.tableName.data}

  cascadeDelete:
    name: ${self:service}-${self:provider.stage}-cascadeDelete
    handler: src/functions/cascade_handlers/cascade_delete.handler
    layers:
      - { Ref: DependenciesLambdaLayer }  # Reference the layer
    events:
      - stream:
          type: dynamodb
          arn: !GetAtt WorkspaceTable.StreamArn
    environment:
      ACCOUNT_TABLE: ${self:custom.tableName.account}
      WORKSPACE_TABLE: ${self:custom.tableName.workspace}
      PATH_TABLE: ${self:custom.tableName.path}
      COMPONENT_TABLE: ${self:custom.tableName.component}
      DATA_TABLE: ${self:custom.tableName.data}

  bulkDataHandler:
    name: ${self:service}-${self:provider.stage}-bulkDataHandler
    handler: src/functions/data_handlers/post_bulk_data_handler.handler
    layers:
      - { Ref: DependenciesLambdaLayer }  # Reference the layer
    environment:
      USER_TABLE: ${self:custom.tableName.user}
      WORKSPACE_TABLE: ${self:custom.tableName.workspace}
      PATH_TABLE: ${self:custom.tableName.path}
      COMPONENT_TABLE: ${self:custom.tableName.component}
      DATA_TABLE: ${self:custom.tableName.data}
      ACCOUNT_TABLE: ${self:custom.tableName.account}

  getWorkspacePaths:
    name: ${self:service}-${self:provider.stage}-getWorkspacePaths
    handler: src/functions/data_handlers/get_workspace_paths.handler
    layers:
      - { Ref: DependenciesLambdaLayer }
    environment:
      WORKSPACE_TABLE: ${self:custom.tableName.workspace}
      PATH_TABLE: ${self:custom.tableName.path}
      ACCOUNT_TABLE: ${self:custom.tableName.account}

  getPathComponents:
    name: ${self:service}-${self:provider.stage}-getPathComponents
    handler: src/functions/data_handlers/get_path_components.handler
    layers:
      - { Ref: DependenciesLambdaLayer }
    environment:
      WORKSPACE_TABLE: ${self:custom.tableName.workspace}
      PATH_TABLE: ${self:custom.tableName.path}
      COMPONENT_TABLE: ${self:custom.tableName.component}
      ACCOUNT_TABLE: ${self:custom.tableName.account}

  getComponentData:
    name: ${self:service}-${self:provider.stage}-getComponentData
    handler: src/functions/data_handlers/get_component_data.handler
    layers:
      - { Ref: DependenciesLambdaLayer }
    environment:
      WORKSPACE_TABLE: ${self:custom.tableName.workspace}
      COMPONENT_TABLE: ${self:custom.tableName.component}
      DATA_TABLE: ${self:custom.tableName.data}
      ACCOUNT_TABLE: ${self:custom.tableName.account}

package:
  patterns:
    - '!**/*.test.js'
    - '!**/*.pyc'
    - '!.pytest_cache/**'
    - '!__pycache__/**'
    - '!node_modules/**'
    - '!tests/**'
    - '!.coverage'
    - '!.pytest_cache'
    - '!.git/**'

resources:
  Resources:
    # AppSync IAM Roles
    AppSyncDynamoDBServiceRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service: appsync.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: DynamoDBAccess
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - dynamodb:GetItem
                    - dynamodb:PutItem
                    - dynamodb:UpdateItem
                    - dynamodb:DeleteItem
                    - dynamodb:Query
                    - dynamodb:Scan
                  Resource:
                    - !GetAtt UserTable.Arn
                    - !GetAtt AccountTable.Arn
                    - !GetAtt WorkspaceTable.Arn
                    - !GetAtt PathTable.Arn
                    - !GetAtt ComponentTable.Arn
                    - !GetAtt DataTable.Arn
                    - !Sub "${UserTable.Arn}/index/*"
                    - !Sub "${AccountTable.Arn}/index/*"
                    - !Sub "${WorkspaceTable.Arn}/index/*"
                    - !Sub "${PathTable.Arn}/index/*"
                    - !Sub "${ComponentTable.Arn}/index/*"
                    - !Sub "${DataTable.Arn}/index/*"

    AppSyncLambdaServiceRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service: appsync.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: LambdaInvoke
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - lambda:InvokeFunction
                  Resource:
                    - "arn:aws:lambda:${self:provider.region}:${aws:accountId}:function:${self:service}-${self:provider.stage}-bulkDataHandler"

    # DynamoDB Tables
    UserTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tableName.user}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH

    AccountTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tableName.account}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: user_id
            AttributeType: S
          - AttributeName: workspace_id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: UserWorkspaceIndex
            KeySchema:
              - AttributeName: user_id
                KeyType: HASH
              - AttributeName: workspace_id
                KeyType: RANGE
            Projection:
              ProjectionType: ALL

    WorkspaceTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tableName.workspace}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES

    PathTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tableName.path}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: workspace_id
            AttributeType: S
          - AttributeName: normalized_name
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: WorkspacePathIndex
            KeySchema:
              - AttributeName: workspace_id
                KeyType: HASH
              - AttributeName: normalized_name
                KeyType: RANGE
            Projection:
              ProjectionType: ALL

    ComponentTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tableName.component}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: path_id
            AttributeType: S
          - AttributeName: name
            AttributeType: S
          - AttributeName: workspace_id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
        GlobalSecondaryIndexes:
          - IndexName: WorkspaceComponentIndex
            KeySchema:
              - AttributeName: workspace_id
                KeyType: HASH
            Projection:
              ProjectionType: ALL

    DataTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tableName.data}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: component_id
            AttributeType: S
          - AttributeName: workspace_id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
        GlobalSecondaryIndexes:
          - IndexName: WorkspaceDataIndex
            KeySchema:
              - AttributeName: workspace_id
                KeyType: HASH
            Projection:
              ProjectionType: ALL

    # S3 Bucket
    DataBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:service}-${self:provider.stage}-data-bucket

    # Cognito
    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${self:service}-${self:provider.stage}-user-pool
        AutoVerifiedAttributes:
          - email
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireLowercase: true
            RequireNumbers: true
            RequireSymbols: true
            RequireUppercase: true
        Schema:
          - Name: email
            AttributeDataType: String
            Mutable: true
            Required: true
          - Name: custom:user_id
            AttributeDataType: String
            Mutable: true
            Required: false

    CognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: ${self:service}-${self:provider.stage}-client
        UserPoolId: !Ref CognitoUserPool
        ExplicitAuthFlows:
          - ALLOW_USER_PASSWORD_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH
        GenerateSecret: false
