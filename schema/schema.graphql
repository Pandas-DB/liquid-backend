type User {
  id: ID!
  created_at: AWSDateTime!
  updated_at: AWSDateTime!
  email: String!
  token: String
  metadata: AWSJSON
  accounts: [Account]
}

type Account {
  id: ID!
  created_at: AWSDateTime!
  updated_at: AWSDateTime!
  user_id: ID!
  workspace_id: ID!
  user_is_workspace_admin: Boolean!
  user: User
  workspace: Workspace
}

type Workspace {
  id: ID!
  created_at: AWSDateTime!
  updated_at: AWSDateTime!
  name: String!
  metadata: AWSJSON
  paths: [Path]
  accounts: [Account]
}

type Path {
  id: ID!
  workspace_id: ID!
  created_at: AWSDateTime!
  updated_at: AWSDateTime!
  name: String!
  normalized_name: String!
  metadata: AWSJSON
  workspace: Workspace
  components: [Component]
}

type Component {
  id: ID!
  created_at: AWSDateTime!
  updated_at: AWSDateTime!
  name: String!
  workspace_id: ID!
  path_id: ID!
  has_data: Boolean!
  has_action: Boolean!
  metadata: AWSJSON
  path: Path
  data: [Data]
}

type Data {
  id: ID!
  created_at: AWSDateTime!
  updated_at: AWSDateTime!
  workspace_id: ID!
  component_id: ID!
  data: AWSJSON!
  data_map: AWSJSON!
  s3_location: String
  component: Component
}

type Query {
  # Admin-only operations
  getUser(id: ID!): User @aws_auth(cognito_groups: ["Admin"])
  listUsers: [User] @aws_auth(cognito_groups: ["Admin"])

  # Workspace operations
  getWorkspace(id: ID!): Workspace @aws_iam
  listWorkspaces(limit: Int, nextToken: String): WorkspaceConnection! @aws_iam
  listUserWorkspaces: [Workspace] @aws_iam

  # Rest of operations that need permission checks in resolvers
  getPath(id: ID!): Path @aws_iam
  listPaths(workspaceId: ID!, limit: Int, nextToken: String): PathConnection! @aws_iam
  getComponent(id: ID!): Component @aws_iam
  listComponents(pathId: ID!, limit: Int, nextToken: String): ComponentConnection! @aws_iam
  getData(id: ID!): Data @aws_iam
  listData(componentId: ID!, limit: Int, nextToken: String): DataConnection! @aws_iam
}

type Mutation {
  # Admin-only operations
  createUser(email: String!, token: String, metadata: AWSJSON): User @aws_auth(cognito_groups: ["Admin"])
  deleteUser(id: ID!): Boolean @aws_auth(cognito_groups: ["Admin"])

  # Operations that need permission checks in resolvers
  createWorkspace(name: String!, metadata: AWSJSON): Workspace @aws_iam
  deleteWorkspace(id: ID!): Boolean @aws_iam

  createPath(workspaceId: ID!, name: String!, metadata: AWSJSON): Path @aws_iam
  deletePath(id: ID!): Boolean @aws_iam

  createComponent(pathId: ID!, name: String!, hasData: Boolean!, hasAction: Boolean!, metadata: AWSJSON): Component @aws_iam
  deleteComponent(id: ID!): Boolean @aws_iam

  createData(componentId: ID!, data: AWSJSON!, dataMap: AWSJSON!, addToDataLake: Boolean = true): Data @aws_iam
  deleteData(id: ID!, deleteInDataLake: Boolean = true): Boolean @aws_iam

  bulkCreateData(input: BulkDataInput!): BulkDataResponse! @aws_iam
}

type Subscription {
  onCreateComponent(pathId: ID!): Component
    @aws_subscribe(mutations: ["createComponent"])
  onDeleteComponent(pathId: ID!): Boolean
    @aws_subscribe(mutations: ["deleteComponent"])
  onCreateData(componentId: ID!): Data
    @aws_subscribe(mutations: ["createData"])
  onDeleteData(componentId: ID!): Boolean
    @aws_subscribe(mutations: ["deleteData"])
}

type WorkspaceConnection {
  items: [Workspace]!
  nextToken: String
}

type PathConnection {
  items: [Path]!
  nextToken: String
}

type ComponentConnection {
  items: [Component]!
  nextToken: String
}

type DataConnection {
  items: [Data]!
  nextToken: String
}
